# -*- coding: utf-8 -*-
"""AI Asteroid Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ksCulBvfs-5DzmcGx4WfMrT658_xU2T7

**Importing Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**Reading the data set**"""

df = pd.read_csv('nasa.csv')
df.head()

df.shape

df.info()

"""**Dropping the colums which are not useful in classification**"""

df = df.drop(['Neo Reference ID', 'Name', 'Orbit ID', 'Close Approach Date', 'Epoch Date Close Approach', 'Orbit Determination Date'] , axis = 1)
df.head()

"""**Converting Hazardous coloumn from bolean to Binary**"""

hazardous_labels = pd.get_dummies(df['Hazardous'])
hazardous_labels

df = pd.concat([df, hazardous_labels], axis = 1)
df.head()

df = df.drop(['Hazardous'], axis = 1)
df.head()

df.info()

"""**Observing Unique Values in Orbiting Body and Equinox**"""

df['Orbiting Body'].value_counts()

df['Equinox'].value_counts()

"""**Dropping both coloums as there is only one unique value therefore not required for classification**"""

df =df.drop(['Orbiting Body', 'Equinox'], axis = 1)

"""**Heatmap of Correlation**"""

plt.figure(figsize = (20,20))
sns.heatmap(df.corr(),annot = True)

"""**Many Columns are there which are having correlation1because they are
identical columns with a different unit.So,can be dropped.**
"""

df = df.drop(['Est Dia in KM(max)', 'Est Dia in M(min)', 'Est Dia in M(max)', 'Est Dia in Miles(min)',
             'Est Dia in Miles(max)', 'Est Dia in Feet(min)', 'Est Dia in Feet(max)',
             'Relative Velocity km per hr', 'Miles per hour', 'Miss Dist.(lunar)',
             'Miss Dist.(kilometers)', 'Miss Dist.(miles)'], axis = 1)
df.head()

"""**Final Heatmap**"""

plt.figure(figsize = (20,20))
sns.heatmap(df.corr(),annot = True)

"""**Droping the Flase coloumn as True coloumn in enough for classification**"""

df.drop([False], axis = 1, inplace = True)
df.head()

df.describe()

x = df.drop([True], axis = 1)
y = df[True].astype(int)

"""**Building the Model**

**Training the Model**
"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 0 , test_size = 0.3)

"""# **XGBoost Classifier**

---

XGBoost isadecision-tree-based ensemble Machine Learning algorithm that usesa
gradient boosting framework.In prediction problems involving unstructured data(images,
text,etc.)...Awide range of applications:Can be used to solve regression,classification,
ranking,and user-defined prediction problems.


The XGBoost library providesabuilt-in function to plot features ordered by their
importance.
"""

import xgboost as xg
from xgboost import XGBClassifier
from matplotlib import pyplot
from xgboost import plot_importance

xbg_model = XGBClassifier()
xbg_model.fit(x_train,y_train)
plot_importance(xbg_model)
pyplot.show()

"""# **Final Accuracy Score**"""

from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
predictions = xbg_model.predict(x_test)
acc = accuracy_score(y_test, predictions)
print(str(np.round(acc*100, 3))+'%')
#print(str(np.round(acc*100, 3))+'%') is to show it as %value upto 3 decimal points.
print(classification_report(y_test, predictions))
print(confusion_matrix(y_test, predictions))